{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "synapsemigration"
		},
		"synapsemigration-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'synapsemigration-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:synapsemigration.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"kv_migrations_dev_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://kv-Migrations-dev.vault.azure.net/"
		},
		"synapsemigration-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://synapasemig123.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/Migration _testing_1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "nb_migrate_to_fabric",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "note_migrate_fabric",
								"type": "NotebookReference"
							},
							"parameters": {
								" tenantId": {
									"value": "0eadb77e-42dc-47f8-bbe3-ec2395e0712c",
									"type": "string"
								},
								"clientId": {
									"value": "a7c183f6-27fd-4c7a-ad9a-53b80754c26a",
									"type": "string"
								},
								"fabricWorkspace": {
									"value": "51ff8cf4-d80c-4ed4-ac48-9afdf978c965",
									"type": "string"
								},
								"storageAccount": {
									"value": "synapsemig123",
									"type": "string"
								},
								"container": {
									"value": "synapsemig124",
									"type": "string"
								},
								"folderPath": {
									"value": "notebooks/",
									"type": "string"
								}
							},
							"snapshot": true,
							"executorSize": "Small",
							"conf": {
								"spark.dynamicAllocation.enabled": false,
								"spark.dynamicAllocation.minExecutors": 2,
								"spark.dynamicAllocation.maxExecutors": 2
							},
							"driverSize": "Small",
							"numExecutors": 2
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/note_migrate_fabric')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Test_Migration_Pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_adls_demo')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsemigration-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					},
					{
						"name": "salary",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsemigration-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/kv_migrations_dev')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('kv_migrations_dev_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapsemigration-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('synapsemigration-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapsemigration-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('synapsemigration-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Migrations env')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spmigratenb1",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "b70eae1e-104d-4f77-91d0-e50e20863ca2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/68c3d8dd-4754-4425-9b5a-7b1e80e17f9e/resourceGroups/Migration/providers/Microsoft.Synapse/workspaces/synapsemigration/bigDataPools/spmigratenb1",
						"name": "spmigratenb1",
						"type": "Spark",
						"endpoint": "https://synapsemigration.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spmigratenb1",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.4",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"automaticScaleJobs": false
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"# Show every Spark config (handy to scan once)\n",
							"for k, v in spark.sparkContext.getConf().getAll():\n",
							"    print(k, \"=\", v)\n",
							"\n",
							"# Extract just variables set like spark.executorEnv.MY_VAR\n",
							"env_vars = {\n",
							"    k[len(\"spark.executorEnv.\"):]: v\n",
							"    for k, v in spark.sparkContext.getConf().getAll()\n",
							"    if k.startswith(\"spark.executorEnv.\")\n",
							"}\n",
							"print(\"executorEnv variables:\", env_vars)\n",
							"mssparkutils.credentials.getSecret(\"kv-migrations-dev\", \"migration-password\")\n",
							"\n",
							""
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"import os\n",
							"for k in sorted(os.environ):\n",
							"    if k.isupper():   # quick filter (optional)\n",
							"        print(k, \"=\", os.environ[k])\n",
							"pwd = get_secret(\"migration-password\")\n",
							""
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"mssparkutils.credentials.getSecret(\"kv-migrations-dev\", \"migration-password\")\n",
							""
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"from notebookutils import mssparkutils\n",
							"\n",
							"pwd = mssparkutils.credentials.getSecret(\"kv_migrations_dev\", \"migration-password\")\n",
							"print(\"Secret length:\", len(pwd))   # don't print the raw secret\n",
							""
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"%pip install --quiet azure-identity azure-keyvault-secrets\n",
							""
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"python -m pip install --upgrade pip"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"from azure.identity import ManagedIdentityCredential\n",
							"from azure.keyvault.secrets import SecretClient\n",
							"\n",
							"KV_URI = \"https://kv-migrations-dev.vault.azure.net/\"\n",
							"cred = ManagedIdentityCredential()          # uses Synapse workspace MI\n",
							"client = SecretClient(vault_url=KV_URI, credential=cred)\n",
							"\n",
							"pwd = client.get_secret(\"migration-password\").value\n",
							"print(\"Secret length:\", len(pwd))\n",
							""
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"from notebookutils import mssparkutils\n",
							"mssparkutils.library.installPyPI(\"azure-identity\")\n",
							"mssparkutils.library.installPyPI(\"azure-keyvault-secrets\")\n",
							"mssparkutils.library.restartPython()\n",
							""
						],
						"outputs": [],
						"execution_count": 21
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/note_migrate_fabric')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "31fd6edf-48dd-46c0-b03d-bd89b602ee6d"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"# Notebook parameters (overridden by pipeline if provided)\n",
							"\n",
							"tenantId        = dbutils.widgets.get(\"tenantId\")        if \"dbutils\" in globals() else \"0eadb77e-42dc-47f8-bbe3-ec2395e0712c\"\n",
							"clientId        = dbutils.widgets.get(\"clientId\")        if \"dbutils\" in globals() else \"a7c183f6-27fd-4c7a-ad9a-53b80754c26a\"\n",
							"clientSecret    = dbutils.widgets.get(\"clientSecret\")    if \"dbutils\" in globals() else \"2Xh8Q~K0IjXxbwS5RnR0RiHOWn-C3PIvic_gydoH\"\n",
							"fabricWorkspace = dbutils.widgets.get(\"fabricWorkspace\") if \"dbutils\" in globals() else \"51ff8cf4-d80c-4ed4-ac48-9afdf978c965\"\n",
							"\n",
							"storageAccount  = dbutils.widgets.get(\"storageAccount\")  if \"dbutils\" in globals() else \"synapsemig123\"\n",
							"container       = dbutils.widgets.get(\"container\")       if \"dbutils\" in globals() else \"synapsemig124\"\n",
							"folderPath      = dbutils.widgets.get(\"folderPath\")      if \"dbutils\" in globals() else \"notebooks/\"\n",
							"sasToken        = dbutils.widgets.get(\"sasToken\")        if \"dbutils\" in globals() else \"\"  # optional\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"try:\n",
							"    import requests\n",
							"except Exception:\n",
							"    import sys, subprocess\n",
							"    subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", \"requests\"])\n",
							"    import requests\n",
							"\n",
							"import base64, json\n",
							"from notebookutils import mssparkutils\n",
							"\n",
							"FABRIC_API_BASE = \"https://api.fabric.microsoft.com/v1\"\n",
							"\n",
							"def get_token(tenant_id, client_id, client_secret):\n",
							"    url = f\"https://login.microsoftonline.com/{tenant_id}/oauth2/v2.0/token\"\n",
							"    data = {\n",
							"        \"client_id\": client_id,\n",
							"        \"client_secret\": client_secret,\n",
							"        \"grant_type\": \"client_credentials\",\n",
							"        \"scope\": \"https://api.fabric.microsoft.com/.default\"\n",
							"    }\n",
							"    r = requests.post(url, data=data, timeout=60)\n",
							"    r.raise_for_status()\n",
							"    return r.json()[\"access_token\"]\n",
							"\n",
							"def list_files_adls(account, container, folder):\n",
							"    prefix = f\"abfss://{container}@{account}.dfs.core.windows.net/{folder}\"\n",
							"    items = mssparkutils.fs.ls(prefix)\n",
							"    return [x.path for x in items if x.name.endswith(\".ipynb\")]\n",
							"\n",
							"def read_file_bytes_adls(path):\n",
							"    with mssparkutils.fs.open(path, \"rb\") as f:\n",
							"        return f.read()\n",
							"\n",
							"def create_fabric_notebook(token, workspace_id, display_name, ipynb_bytes, folder_name=\"Migrated\"):\n",
							"    b64 = base64.b64encode(ipynb_bytes).decode(\"utf-8\")\n",
							"    body = {\n",
							"        \"displayName\": display_name,\n",
							"        \"type\": \"notebook\",\n",
							"        \"definition\": {\n",
							"            \"format\": \"ipynb\",\n",
							"            \"parts\": [\n",
							"                {\"path\": f\"{display_name}.ipynb\", \"payloadType\": \"InlineBase64\", \"payload\": b64}\n",
							"            ]\n",
							"        }\n",
							"    }\n",
							"    if folder_name:\n",
							"        body[\"folder\"] = {\"name\": folder_name}\n",
							"\n",
							"    hdrs = {\"Authorization\": f\"Bearer {token}\", \"Content-Type\": \"application/json\"}\n",
							"    r = requests.post(f\"{FABRIC_API_BASE}/workspaces/{workspace_id}/items\",\n",
							"                      headers=hdrs, data=json.dumps(body), timeout=120)\n",
							"    r.raise_for_status()\n",
							"    return r.json()[\"id\"]\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"token = get_token(tenantId, clientId, clientSecret)\n",
							"print(\"✅ Token acquired.\")\n",
							"\n",
							"paths = list_files_adls(storageAccount, container, folderPath)\n",
							"print(\"Found files:\", paths)\n",
							"\n",
							"created, errors = [], []\n",
							"for p in paths:\n",
							"    name = p.split(\"/\")[-1]\n",
							"    try:\n",
							"        raw = read_file_bytes_adls(p)\n",
							"        nid = create_fabric_notebook(token, fabricWorkspace, name.replace(\".ipynb\",\"\"), raw)\n",
							"        created.append((name, nid))\n",
							"        print(f\"OK -> {name} => {nid}\")\n",
							"    except Exception as ex:\n",
							"        errors.append((name, str(ex)))\n",
							"        print(f\"❌ ERROR {name}: {ex}\")\n",
							"\n",
							"print(\"\\nSummary:\", \"Created:\", len(created), \"Errors:\", len(errors))\n",
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/spmigratenb1')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 5,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.4",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "westus2"
		}
	]
}